{"version":3,"sources":["components/navbar.jsx","components/collection.jsx","components/home.jsx","services/logService.js","services/httpService.js","services/authService.js","components/login.jsx","App.js","registerServiceWorker.js","index.js"],"names":["NavBar","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Collections","match","location","Home","Fragment","Component","init","log","error","console","axios","interceptors","response","use","status","logger","toast","Promise","reject","get","post","put","delete","setJwt","jwt","defaults","headers","common","apiUrl","getJwt","localStorage","getItem","http","login","socketJwt","a","async","loginWithJwt","setItem","logout","removeItem","getCurrentUser","jwtDecode","ex","Login","getSocketJwt","props","queryString","parse","search","this","auth","state","window","from","pathname","socketLoginUrl","href","App","path","component","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","process","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.095cf12f.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nconst NavBar = () => {\n\treturn (\n\t\t<nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n\t\t\t<Link className=\"navbar-brand\" to=\"/\">\n\t\t\t\t<h1>HITMAN</h1>\n\t\t\t</Link>\n\t\t\t<button\n\t\t\t\tclassName=\"navbar-toggler\"\n\t\t\t\ttype=\"button\"\n\t\t\t\tdata-toggle=\"collapse\"\n\t\t\t\tdata-target=\"#navbarSupportedContent\"\n\t\t\t\taria-controls=\"navbarSupportedContent\"\n\t\t\t\taria-expanded=\"false\"\n\t\t\t\taria-label=\"Toggle navigation\"\n\t\t\t>\n\t\t\t\t<span className=\"navbar-toggler-icon\" />\n\t\t\t</button>\n\t\t</nav>\n\t);\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport NavBar from \"./navbar\";\n\nconst Collections = ({ match, location }) => {\n  return (\n    <div>\n      <NavBar />\n\n      <h1>Collections</h1>\n    </div>\n  );\n};\n\nexport default Collections;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Home extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <h1>Welcome To Hitman</h1>\n        <button className=\"btn btn-success btn-lg\">\n          <Link to=\"/login\">Go To Login</Link>\n        </button>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Home;\n","// For simplicity, I changed the implementation of this module\n// and removed Raven. We can always add that in the future\n// and this module is the only module we need to modify.\n\nfunction init() {}\n\nfunction log(error) {\n  console.error(error);\n}\n\nexport default {\n  init,\n  log\n};\n","import axios from \"axios\";\nimport logger from \"./logService\";\nimport { toast } from \"react-toastify\";\n\naxios.interceptors.response.use(null, error => {\n  const expectedError =\n    error.response &&\n    error.response.status >= 400 &&\n    error.response.status < 500;\n\n  if (!expectedError) {\n    logger.log(error);\n    toast.error(\"An unexpected error occurrred.\");\n  }\n\n  return Promise.reject(error);\n});\n\nfunction setJwt(jwt) {\n  axios.defaults.headers.common[\"x-auth-token\"] = jwt;\n}\n\nexport default {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete,\n  setJwt\n};\n","import jwtDecode from 'jwt-decode';\nimport http from './httpService';\nimport { apiUrl } from '../config.json';\n\nconst apiEndpoint = apiUrl + '/login';\nconst tokenKey = 'token';\n\nhttp.setJwt(getJwt());\n\nexport async function login(socketJwt) {\n\t// const { data: jwt } = await http.post(apiEndpoint, { socketJwt });\n\t// localStorage.setItem(tokenKey, response.headers['x-auth-token']);\n}\n\nexport function loginWithJwt(jwt) {\n\tlocalStorage.setItem(tokenKey, jwt);\n}\n\nexport function logout() {\n\tlocalStorage.removeItem(tokenKey);\n}\n\nexport function getCurrentUser() {\n\ttry {\n\t\tconst jwt = localStorage.getItem(tokenKey);\n\t\treturn jwtDecode(jwt);\n\t} catch (ex) {\n\t\treturn null;\n\t}\n}\n\nexport function getJwt() {\n\treturn localStorage.getItem(tokenKey);\n}\n\nexport default {\n\tlogin,\n\tloginWithJwt,\n\tlogout,\n\tgetCurrentUser,\n\tgetJwt\n};\n","import queryString from \"query-string\";\nimport React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport auth from \"../services/authService\";\n\nclass Login extends Component {\n  async componentDidMount() {\n    const socketJwt = this.getSocketJwt();\n    if (!socketJwt) return;\n    await auth.login(socketJwt);\n    const { state } = this.props.location;\n    window.location = state ? state.from.pathname : \"/collections\";\n  }\n\n  getSocketJwt = () => {\n    const { location } = this.props;\n    const { \"sokt-auth-token\": socketJwt } = queryString.parse(location.search);\n    return socketJwt;\n  };\n\n  render() {\n    if (auth.getCurrentUser()) return <Redirect to=\"/collections\" />;\n    const redirectionUrl = \"http://localhost:3000/login\";\n    const socketLoginUrl = `https://viasocket.com/login?token_required=true&redirect_uri=${redirectionUrl}`;\n\n    return (\n      <React.Fragment>\n        <h1>Login</h1>\n\n        <button className=\"btn btn-success btn-lg\">\n          <a href={socketLoginUrl}>Login With ViaSocket</a>\n        </button>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport Collections from \"./components/collection\";\nimport Home from \"./components/home\";\nimport Login from \"./components/login\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"content\">\n          <Switch>\n            <Route path=\"/collections\" component={Collections} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/\" component={Home} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconsole.log(process.env);\nReactDOM.render(\n\t<BrowserRouter>\n\t\t<App />\n\t</BrowserRouter>,\n\tdocument.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}